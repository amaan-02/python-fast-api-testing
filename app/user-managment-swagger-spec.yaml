openapi: 3.0.0
info:
  title: Combined API Specification
  version: 1.0.0
paths:
  /api/users:
    get:
      summary: Fetch all users
      tags:
      - Users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a user
      tags:
      - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User already exists
  /api/users/{user_id}:
    get:
      summary: Fetch user by ID
      tags:
      - Users
      parameters:
      - name: user_id
        in: path
        description: ID of user to fetch
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /api/roles:
    get:
      summary: Fetch all roles
      tags:
      - Roles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      summary: Create a role
      tags:
      - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/auth/login:
    post:
      summary: Login user
      tags:
      - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
  /api/admin/logs:
    get:
      summary: Fetch system logs
      tags:
      - Admin Operations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: {}
  /api/system/health:
    get:
      summary: Check API health
      tags:
      - System Monitoring
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: {}
  /api/system/time:
    get:
      summary: Fetch server time
      tags:
      - System Monitoring
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                format: date-time
  /api/utils/info:
    get:
      summary: Fetch utility info
      tags:
      - Utilities
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
          format: email
      required:
      - id
      - name
      - email
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
      required:
      - id
      - name
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - email
      - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        token_type:
          type: string
      required:
      - token
      - token_type
